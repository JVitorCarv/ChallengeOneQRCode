{"version":3,"sources":["components/Electric.js","components/Mechanical.js","components/Unidentified.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Electric","React","useState","faltaEnergia","chaveFusivel","tensaoNormal","cheiroQueimado","state","setState","handleChange","event","target","name","checked","Box","sx","display","FormControl","m","component","variant","FormLabel","FormGroup","FormControlLabel","control","Checkbox","onChange","label","FormHelperText","Mechanical","nivelSuccao","valvulaSuccao","valvulaRecalque","vibracaoAnormal","bombaTravada","barulhoAnormal","gaxetaVazamento","Unidentified","TextField","id","placeholder","multiline","Button","href","Form","form","setForm","attr","value","width","noValidate","autoComplete","required","problemDescription","e","operatorName","operatorPhone","select","nature","helperText","map","tipo","MenuItem","handleNature","app","initializeApp","apiKey","authDomain","databaseURL","database","getDatabase","useStyles","makeStyles","theme","conatiner","marginTop","title","justifyContent","alignItems","background","color","padding","btn","marginBottom","App","text","setText","imageUrl","setImageUrl","scanResultWebCam","setScanResultWebCam","natureProblem","classes","generateQrCode","a","QRCode","toDataURL","response","console","log","Container","className","Card","CardContent","Grid","container","spacing","item","xl","lg","md","sm","xs","onClick","download","src","alt","delay","style","onError","error","onScan","result","newPostKey","push","child","ref","key","parsedData","JSON","parse","set","ativo","tombamento","unidade","setor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+bAoFeA,MAzEf,WAAqB,IAAD,EACQC,IAAMC,SAAS,CACvCC,cAAc,EACdC,cAAc,EACdC,cAAc,EACdC,gBAAgB,IALA,mBACXC,EADW,KACJC,EADI,KAQZC,EAAe,SAACC,GACpBF,EAAS,2BACJD,GADG,kBAELG,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,YAI9BV,EAA6DI,EAA7DJ,aAAcC,EAA+CG,EAA/CH,aAAcC,EAAiCE,EAAjCF,aAAcC,EAAmBC,EAAnBD,eAElD,OACE,8BACE,cAACQ,EAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,QAApB,SACE,eAACC,EAAA,EAAD,CAAaF,GAAI,CAAEG,EAAG,GAAKC,UAAU,WAAWC,QAAQ,WAAxD,UACE,cAACC,EAAA,EAAD,CAAWF,UAAU,SAArB,8BACA,eAACG,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEZ,QAASV,EACTuB,SAAUjB,EACVG,KAAK,iBAGTe,MAAM,6CAER,cAACJ,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEZ,QAAST,EACTsB,SAAUjB,EACVG,KAAK,iBAGTe,MAAM,8CAER,cAACJ,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEZ,QAASR,EACTqB,SAAUjB,EACVG,KAAK,iBAGTe,MAAM,iCAER,cAACJ,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEZ,QAASP,EACToB,SAAUjB,EACVG,KAAK,mBAGTe,MAAM,2BAGV,cAACC,EAAA,EAAD,gFCkDKC,MAlHf,WAAuB,IAAD,EACM5B,IAAMC,SAAS,CACvC4B,aAAa,EACbC,eAAe,EACfC,iBAAiB,EACjBC,iBAAiB,EACjBC,cAAc,EACdC,gBAAgB,EAChBC,iBAAiB,IARC,mBACb7B,EADa,KACNC,EADM,KAWdC,EAAe,SAACC,GACpBF,EAAS,2BACJD,GADG,kBAELG,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,YAKpCiB,EAOEvB,EAPFuB,YACAC,EAMExB,EANFwB,cACAC,EAKEzB,EALFyB,gBACAC,EAIE1B,EAJF0B,gBACAC,EAGE3B,EAHF2B,aACAC,EAEE5B,EAFF4B,eACAC,EACE7B,EADF6B,gBAGF,OACE,8BACE,cAACtB,EAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,QAApB,SACE,eAACC,EAAA,EAAD,CAAaF,GAAI,CAAEG,EAAG,GAAKC,UAAU,WAAWC,QAAQ,WAAxD,UACE,cAACC,EAAA,EAAD,CAAWF,UAAU,SAArB,8BACA,eAACG,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEZ,QAASiB,EACTJ,SAAUjB,EACVG,KAAK,gBAGTe,MAAM,gDAER,cAACJ,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEZ,QAASkB,EACTL,SAAUjB,EACVG,KAAK,kBAGTe,MAAM,iDAER,cAACJ,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEZ,QAASmB,EACTN,SAAUjB,EACVG,KAAK,oBAGTe,MAAM,6CAER,cAACJ,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEZ,QAASoB,EACTP,SAAUjB,EACVG,KAAK,oBAGTe,MAAM,sCAER,cAACJ,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEZ,QAASqB,EACTR,SAAUjB,EACVG,KAAK,iBAGTe,MAAM,6BAER,cAACJ,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEZ,QAASsB,EACTT,SAAUjB,EACVG,KAAK,mBAGTe,MAAM,8BAER,cAACJ,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEZ,QAASuB,EACTV,SAAUjB,EACVG,KAAK,oBAGTe,MAAM,uCAGV,cAACC,EAAA,EAAD,gFC5FKS,MArBf,WACE,OACE,gCACE,cAACC,EAAA,EAAD,CACEC,GAAG,oBACHZ,MAAM,4BACNa,YAAY,kBACZC,WAAS,IAEX,qFACA,cAACC,EAAA,EAAD,CACEtB,QAAQ,YACRuB,KAAK,kCACLhC,OAAO,SAHT,2CC+ESiC,MAtFf,YAAkC,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAgBdrC,EAAe,SAACC,EAAOqC,GAC3BD,EAAQ,2BAAKD,GAAN,kBAAaE,EAAOrC,EAAMC,OAAOqC,UAc1C,OACE,cAAClC,EAAA,EAAD,CACEK,UAAU,OACVJ,GAAI,CACF,uBAAwB,CAAEG,EAAG,EAAG+B,MAAO,SAEzCC,YAAU,EACVC,aAAa,MANf,SAQE,gCACE,cAACb,EAAA,EAAD,CACEc,UAAQ,EACRb,GAAG,oBACHZ,MAAM,8BACNa,YAAY,kBACZC,WAAS,EACTO,MAAOH,EAAKQ,mBACZ3B,SAAU,SAAC4B,GAAD,OAAO7C,EAAa6C,EAAG,yBAEnC,cAAChB,EAAA,EAAD,CACEc,UAAQ,EACRb,GAAG,oBACHZ,MAAM,WACNa,YAAY,qBACZQ,MAAOH,EAAKU,aACZ7B,SAAU,SAAC4B,GAAD,OAAO7C,EAAa6C,EAAG,mBAEnC,cAAChB,EAAA,EAAD,CACEc,UAAQ,EACRb,GAAG,0BACHZ,MAAM,uBACNqB,MAAOH,EAAKW,cACZ9B,SAAU,SAAC4B,GAAD,OAAO7C,EAAa6C,EAAG,oBAEnC,cAAChB,EAAA,EAAD,CACEC,GAAG,2BACHkB,QAAM,EACN9B,MAAM,uBACNqB,MAAOH,EAAKa,OACZhC,SAAU,SAAC4B,GAAD,OAAO7C,EAAa6C,EAAG,WACjCK,WAAW,mCANb,SAhEY,CAChB,CACEX,MAAO,EACPrB,MAAO,eAET,CACEqB,MAAO,EACPrB,MAAO,eAET,CACEqB,MAAO,EACPrB,MAAO,wBA6DQiC,KAAI,SAACC,GAAD,OACb,cAACC,EAAA,EAAD,CAA2Bd,MAAOa,EAAKb,MAAvC,SACGa,EAAKlC,OADOkC,EAAKb,YAMvBH,EAAKa,QA5DS,WACnB,OAAQb,EAAKa,QACX,KAAK,EACH,OAAO,cAAC,EAAD,IACT,KAAK,EACH,OAAO,cAAC,EAAD,IACT,QACE,OAAO,cAAC,EAAD,KAqDSK,SC7DlBC,EAAMC,YANW,CACrBC,OACE,2JACFC,WAAY,kCACZC,YAAa,yDAKTC,EAAWC,YAAYN,GA4H7B,IAAMO,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,UAAW,CACTC,UAAW,IAEbC,MAAO,CACL5D,QAAS,OACT6D,eAAgB,SAChBC,WAAY,SACZC,WAAY,UACZC,MAAO,OACPC,QAAS,IAEXC,IAAK,CACHP,UAAW,GACXQ,aAAc,QAGHC,EAzIf,WAAe,MAEWlF,mBAAS,IAFpB,mBAENmF,EAFM,KAEAC,EAFA,OAGmBpF,mBAAS,IAH5B,mBAGNqF,EAHM,KAGIC,EAHJ,OAImCtF,mBAAS,IAJ5C,mBAINuF,EAJM,KAIYC,EAJZ,OAKWxF,mBAAS,CAC/BmD,mBAAoB,GACpBE,aAAc,GACdC,cAAe,GACfmC,cAAe,GACfjC,OAAQ,OAVG,mBAKNb,EALM,KAKAC,EALA,KAcP8C,EAAUrB,IAGVsB,EAAc,uCAAG,4BAAAC,EAAA,+EAEIC,IAAOC,UAAUX,GAFrB,OAEbY,EAFa,OAGnBT,EAAYS,GAHO,gDAKnBC,QAAQC,IAAR,MALmB,yDAAH,qDAyCpB,OACE,cAACC,EAAA,EAAD,CAAWC,UAAWT,EAAQlB,UAA9B,SACE,eAAC4B,EAAA,EAAD,WACE,oBAAID,UAAWT,EAAQhB,MAAvB,4DAGA,cAAC2B,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UAEE,eAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAA5C,UACE,cAAC1E,EAAA,EAAD,CACEX,MAAM,kBACND,SAAU,SAAC4B,GAAD,OAAOgC,EAAQhC,EAAE3C,OAAOqC,UAEpC,cAACN,EAAA,EAAD,CACE2D,UAAWT,EAAQV,IACnB9D,QAAQ,YACR4D,MAAM,UACNiC,QAAS,kBAAMpB,KAJjB,sBAQA,uBACA,uBACA,uBACCN,EACC,mBAAG5C,KAAM4C,EAAU2B,UAAQ,EAA3B,SACE,qBAAKC,IAAK5B,EAAU6B,IAAI,UAExB,QAKN,eAACZ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAA5C,UACE,yDACA,cAAC,IAAD,CACEK,MAAO,IACPC,MAAO,CAAErE,MAAO,QAChBsE,QAtEY,SAACC,GACzBtB,QAAQC,IAAIqB,IAsEAC,OAlEW,SAACC,GACpBA,GACFhC,EAAoBgC,MAkEZ,0DAA6BjC,KAC7B,cAAC,EAAD,CAAM5C,KAAMA,EAAMC,QAASA,IAC3B,cAACJ,EAAA,EAAD,CACE2D,UAAWT,EAAQV,IACnB9D,QAAQ,YACR4D,MAAM,UACNiC,QAlEM,WAClBf,QAAQC,IAAItD,GAGZ,IAAM8E,EAAaC,YAAKC,YAAMC,YAAIzD,GAAW,WAAW0D,IAElDC,EAAaC,KAAKC,MAAMD,KAAKC,MAAMzC,IAEzC0C,YAAIL,YAAIzD,EAAD,iBAAqBsD,IAAe,CACzCS,MAAOJ,EAAU,MACjBK,WAAYL,EAAU,WACtBM,QAASN,EAAU,QACnBO,MAAOP,EAAU,QAGnBtC,EAAoB,KA+CV,qCC1HC8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.75a420ad.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Box,\n  FormLabel,\n  FormControl,\n  FormGroup,\n  FormControlLabel,\n  FormHelperText,\n  Checkbox,\n} from \"@material-ui/core\";\n\nfunction Electric() {\n  const [state, setState] = React.useState({\n    faltaEnergia: false,\n    chaveFusivel: false,\n    tensaoNormal: false,\n    cheiroQueimado: false,\n  });\n\n  const handleChange = (event) => {\n    setState({\n      ...state,\n      [event.target.name]: event.target.checked,\n    });\n  };\n\n  const { faltaEnergia, chaveFusivel, tensaoNormal, cheiroQueimado } = state;\n\n  return (\n    <div>\n      <Box sx={{ display: \"flex\" }}>\n        <FormControl sx={{ m: 3 }} component=\"fieldset\" variant=\"standard\">\n          <FormLabel component=\"legend\">Marque as caixas</FormLabel>\n          <FormGroup>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={faltaEnergia}\n                  onChange={handleChange}\n                  name=\"faltaEnergia\"\n                />\n              }\n              label=\"Há falta de energia na vizinhança?\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={chaveFusivel}\n                  onChange={handleChange}\n                  name=\"chaveFusivel\"\n                />\n              }\n              label=\"Chave fusível (canela, banana) aberta?\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={tensaoNormal}\n                  onChange={handleChange}\n                  name=\"tensaoNormal\"\n                />\n              }\n              label=\"Tensão da unidade normal?\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={cheiroQueimado}\n                  onChange={handleChange}\n                  name=\"cheiroQueimado\"\n                />\n              }\n              label=\"Cheiro de queimado?\"\n            />\n          </FormGroup>\n          <FormHelperText>\n            Marque as caixas de acordo com os problemas identificados\n          </FormHelperText>\n        </FormControl>\n      </Box>\n    </div>\n  );\n}\n\nexport default Electric;\n","import React from \"react\";\nimport {\n  Box,\n  FormLabel,\n  FormControl,\n  FormGroup,\n  FormControlLabel,\n  FormHelperText,\n  Checkbox,\n} from \"@material-ui/core\";\n\nfunction Mechanical() {\n  const [state, setState] = React.useState({\n    nivelSuccao: false,\n    valvulaSuccao: false,\n    valvulaRecalque: false,\n    vibracaoAnormal: false,\n    bombaTravada: false,\n    barulhoAnormal: false,\n    gaxetaVazamento: false,\n  });\n\n  const handleChange = (event) => {\n    setState({\n      ...state,\n      [event.target.name]: event.target.checked,\n    });\n  };\n\n  const {\n    nivelSuccao,\n    valvulaSuccao,\n    valvulaRecalque,\n    vibracaoAnormal,\n    bombaTravada,\n    barulhoAnormal,\n    gaxetaVazamento,\n  } = state;\n\n  return (\n    <div>\n      <Box sx={{ display: \"flex\" }}>\n        <FormControl sx={{ m: 3 }} component=\"fieldset\" variant=\"standard\">\n          <FormLabel component=\"legend\">Marque as caixas</FormLabel>\n          <FormGroup>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={nivelSuccao}\n                  onChange={handleChange}\n                  name=\"nivelSuccao\"\n                />\n              }\n              label=\"O nível de succção está normal?\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={valvulaSuccao}\n                  onChange={handleChange}\n                  name=\"valvulaSuccao\"\n                />\n              }\n              label=\"A válvula de sucção está aberta?\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={valvulaRecalque}\n                  onChange={handleChange}\n                  name=\"valvulaRecalque\"\n                />\n              }\n              label=\"A válvula de recalque está aberta?\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={vibracaoAnormal}\n                  onChange={handleChange}\n                  name=\"vibracaoAnormal\"\n                />\n              }\n              label=\"A vibração está anormal?\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={bombaTravada}\n                  onChange={handleChange}\n                  name=\"bombaTravada\"\n                />\n              }\n              label=\"A bomba está travada?\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={barulhoAnormal}\n                  onChange={handleChange}\n                  name=\"barulhoAnormal\"\n                />\n              }\n              label=\"Há um barulho anormal?\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={gaxetaVazamento}\n                  onChange={handleChange}\n                  name=\"gaxetaVazamento\"\n                />\n              }\n              label=\"A gaxeta está com vazamento?\"\n            />\n          </FormGroup>\n          <FormHelperText>\n            Marque as caixas de acordo com os problemas identificados\n          </FormHelperText>\n        </FormControl>\n      </Box>\n    </div>\n  );\n}\n\nexport default Mechanical;\n","import React from \"react\";\nimport { TextField, Button } from \"@material-ui/core\";\n\nfunction Unidentified() {\n  return (\n    <div>\n      <TextField\n        id=\"outlined-textarea\"\n        label=\"Descrição adicional\"\n        placeholder=\"Escreva aqui...\"\n        multiline\n      />\n      <p>Caso sinta necessidade, entre em contato com um CCO:</p>\n      <Button\n        variant=\"contained\"\n        href=\"https://servicos.compesa.com.br\"\n        target=\"_blank\"\n      >\n        Entrar em contato com CCO\n      </Button>\n    </div>\n  );\n}\n\nexport default Unidentified;\n","import React from \"react\";\nimport { TextField, Box, MenuItem } from \"@material-ui/core\";\nimport Electric from \"./Electric\";\nimport Mechanical from \"./Mechanical\";\nimport Unidentified from \"./Unidentified\";\n\nfunction Form({ form, setForm }) {\n  const naturezas = [\n    {\n      value: 1,\n      label: \"Elétrico\",\n    },\n    {\n      value: 2,\n      label: \"Mecânico\",\n    },\n    {\n      value: 3,\n      label: \"Não identificada\",\n    },\n  ];\n\n  const handleChange = (event, attr) => {\n    setForm({ ...form, [attr]: event.target.value });\n  };\n\n  const handleNature = () => {\n    switch (form.nature) {\n      case 1:\n        return <Electric />;\n      case 2:\n        return <Mechanical />;\n      default:\n        return <Unidentified />;\n    }\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        \"& .MuiTextField-root\": { m: 1, width: \"25ch\" },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <div>\n        <TextField\n          required\n          id=\"outlined-textarea\"\n          label=\"Descrição do problema\"\n          placeholder=\"Escreva aqui...\"\n          multiline\n          value={form.problemDescription}\n          onChange={(e) => handleChange(e, \"problemDescription\")}\n        />\n        <TextField\n          required\n          id=\"outlined-required\"\n          label=\"Seu nome\"\n          placeholder=\"Insira seu nome...\"\n          value={form.operatorName}\n          onChange={(e) => handleChange(e, \"operatorName\")}\n        />\n        <TextField\n          required\n          id=\"outlined-password-input\"\n          label=\"Escreva seu telefone\"\n          value={form.operatorPhone}\n          onChange={(e) => handleChange(e, \"operatorPhone\")}\n        />\n        <TextField\n          id=\"outlined-select-natureza\"\n          select\n          label=\"Natureza do problema\"\n          value={form.nature}\n          onChange={(e) => handleChange(e, \"nature\")}\n          helperText=\"Selecione a natureza do problema\"\n        >\n          {naturezas.map((tipo) => (\n            <MenuItem key={tipo.value} value={tipo.value}>\n              {tipo.label}\n            </MenuItem>\n          ))}\n        </TextField>\n\n        {form.nature && handleNature()}\n      </div>\n    </Box>\n  );\n}\n\nexport default Form;\n","import React, { useState } from \"react\";\nimport {\n  Container,\n  Card,\n  CardContent,\n  makeStyles,\n  Grid,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\nimport QRCode from \"qrcode\";\nimport QrReader from \"react-qr-reader\";\nimport { initializeApp } from \"firebase/app\";\nimport { getDatabase, set, ref, child, push } from \"firebase/database\";\n\nimport Form from \"./components/Form\";\n\n//################################# START Firebase Settings ####################################\n//quando depois eu explico para vocês como configura o firebase, por hora podem usar o meu\nconst firebaseConfig = {\n  apiKey:\n    \"AAAAplipsUI:APA91bGQbCDPCuHA-XQRVNJRvYysIqzPqJ4JXk4d9iowYwHgCel81VZCQYqgdqEQaVX2qGWmwyLjGrnkpKtAs56LhlFZaCdRHZMpn9XVLcxtEc7c5GeiD-uMuibIkDFAQVpfV7mtFduP\",\n  authDomain: \"summerjob-9c9bf.firebaseapp.com\",\n  databaseURL: \"https://summerjob-9c9bf-default-rtdb.firebaseio.com/\",\n};\nconst app = initializeApp(firebaseConfig);\n\n// Get a reference to the database service\nconst database = getDatabase(app);\n//################################# END Firebase Settings ####################################\n\n//################################# APP ####################################\nfunction App() {\n  // States do app\n  const [text, setText] = useState(\"\");\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [scanResultWebCam, setScanResultWebCam] = useState(\"\");\n  const [form, setForm] = useState({\n    problemDescription: \"\",\n    operatorName: \"\",\n    operatorPhone: \"\",\n    natureProblem: \"\",\n    nature: null,\n  });\n\n  // carregando estilo customizado\n  const classes = useStyles();\n\n  // codigo responsavel por gerar o QR code a partir do dado passado para o input\n  const generateQrCode = async () => {\n    try {\n      const response = await QRCode.toDataURL(text);\n      setImageUrl(response);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // função responsavel por gerenciar os erros da leitura do QR CODE\n  const handleErrorWebCam = (error) => {\n    console.log(error);\n  };\n\n  // função executada quando há uma leitura do QR code pela camera do notebook\n  const handleScanWebCam = (result) => {\n    if (result) {\n      setScanResultWebCam(result);\n    }\n  };\n\n  // função responsavel por INSERIR os dados obtidos a partir da leitura do QR CODE\n  // para o firebase\n  const submitOrder = () => {\n    console.log(form);\n\n    // documentação para tempo real do firebase https://firebase.google.com/docs/database/web/start?authuser=0\n    const newPostKey = push(child(ref(database), \"ativos\")).key;\n\n    const parsedData = JSON.parse(JSON.parse(scanResultWebCam));\n\n    set(ref(database, `ativos/${newPostKey}`), {\n      ativo: parsedData[\"ativo\"],\n      tombamento: parsedData[\"tombamento\"],\n      unidade: parsedData[\"unidade\"],\n      setor: parsedData[\"setor\"],\n    });\n\n    setScanResultWebCam(\"\");\n  };\n\n  return (\n    <Container className={classes.conatiner}>\n      <Card>\n        <h2 className={classes.title}>\n          Generate Download & Scan QR Code with React js\n        </h2>\n        <CardContent>\n          <Grid container spacing={2}>\n            {/* Parte do codigo HTML responsavel por gerar o QR CODE */}\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n              <TextField\n                label=\"Enter Text Here\"\n                onChange={(e) => setText(e.target.value)}\n              />\n              <Button\n                className={classes.btn}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => generateQrCode()}\n              >\n                Generate\n              </Button>\n              <br />\n              <br />\n              <br />\n              {imageUrl ? (\n                <a href={imageUrl} download>\n                  <img src={imageUrl} alt=\"img\" />\n                </a>\n              ) : null}\n            </Grid>\n            {/* END Parte do codigo HTML responsavel por gerar o QR CODE */}\n\n            {/* Parte do codigo HTML responsavel por Ler o QR CODE */}\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n              <h3>Qr Code Scan by Web Cam</h3>\n              <QrReader\n                delay={300}\n                style={{ width: \"100%\" }}\n                onError={handleErrorWebCam}\n                onScan={handleScanWebCam}\n              />\n              <h3>Scanned By WebCam Code: {scanResultWebCam}</h3>\n              <Form form={form} setForm={setForm} />\n              <Button\n                className={classes.btn}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={submitOrder}\n              >\n                Submit OS\n              </Button>\n            </Grid>\n            {/* END Parte do codigo HTML responsavel por Ler o QR CODE */}\n          </Grid>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n}\n\n// Criação de um estilo customizado\nconst useStyles = makeStyles((theme) => ({\n  conatiner: {\n    marginTop: 10,\n  },\n  title: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    background: \"#3f51b5\",\n    color: \"#fff\",\n    padding: 20,\n  },\n  btn: {\n    marginTop: 10,\n    marginBottom: 20,\n  },\n}));\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}