{"version":3,"sources":["components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Form","useState","natureza","setNatureza","Box","component","sx","m","width","noValidate","autoComplete","TextField","required","id","label","placeholder","multiline","type","select","value","onChange","event","target","helperText","map","tipo","MenuItem","app","initializeApp","apiKey","authDomain","databaseURL","database","getDatabase","useStyles","makeStyles","theme","conatiner","marginTop","title","display","justifyContent","alignItems","background","color","padding","btn","marginBottom","App","text","setText","imageUrl","setImageUrl","scanResultWebCam","setScanResultWebCam","classes","generateQrCode","a","QRCode","toDataURL","response","console","log","Container","className","Card","CardContent","Grid","container","spacing","item","xl","lg","md","sm","xs","e","Button","variant","onClick","href","download","src","alt","delay","style","onError","error","onScan","result","newPostKey","push","child","ref","key","parsedData","JSON","parse","set","ativo","tombamento","unidade","setor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.231617c6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport {\n    TextField,\n    Box,\n    MenuItem,\n  } from \"@material-ui/core\";\n\nfunction Form () {\n    \n    const naturezas = [\n        {\n          value: 'Electric',\n          label: 'Elétrico',\n        },\n        {\n          value: 'Mechanical',\n          label: 'Mecânico',\n        },\n        {\n          value: 'Unidentified',\n          label: 'Não identificado',\n        },\n      ];\n\n    const [natureza, setNatureza] = useState('');\n      \n    const handleChange = (event) => {\n        setNatureza(event.target.value);\n    };\n    \n    \n    return (\n        <Box\n      component=\"form\"\n      sx={{\n        '& .MuiTextField-root': { m: 1, width: '25ch' },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <div>\n        <TextField\n          required\n          id=\"outlined-textarea\"\n          label=\"Descrição do problema\"\n          placeholder=\"Escreva aqui...\"\n          multiline\n        />\n        <TextField\n          required\n          id=\"outlined-required\"\n          label=\"Seu nome\"\n          placeholder=\"Insira seu nome...\"\n        />\n        <TextField\n          required\n          id=\"outlined-password-input\"\n          label=\"Escreva seu número\"\n          type=\"number\"\n        />\n        <TextField\n          id=\"outlined-select-natureza\"\n          select\n          label=\"Natureza do problema\"\n          value={natureza}\n          onChange={handleChange}\n          helperText=\"Selecione a natureza do problema\"\n        >\n          {naturezas.map((tipo) => (\n            <MenuItem key={tipo.value} value={tipo.value}>\n              {tipo.label}\n            </MenuItem>\n          ))}\n        </TextField>\n      </div>\n    </Box>\n    )\n}\n\nexport default Form","import React, { useState } from \"react\";\nimport {\n  Container,\n  Card,\n  CardContent,\n  makeStyles,\n  Grid,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\nimport QRCode from \"qrcode\";\nimport QrReader from \"react-qr-reader\";\nimport { initializeApp } from \"firebase/app\";\nimport { getDatabase, set, ref, child, push } from \"firebase/database\";\n\nimport Form from './components/Form'\n\n//################################# START Firebase Settings ####################################\n//quando depois eu explico para vocês como configura o firebase, por hora podem usar o meu\nconst firebaseConfig = {\n  apiKey:\n    \"AAAAplipsUI:APA91bGQbCDPCuHA-XQRVNJRvYysIqzPqJ4JXk4d9iowYwHgCel81VZCQYqgdqEQaVX2qGWmwyLjGrnkpKtAs56LhlFZaCdRHZMpn9XVLcxtEc7c5GeiD-uMuibIkDFAQVpfV7mtFduP\",\n  authDomain: \"summerjob-9c9bf.firebaseapp.com\",\n  databaseURL: \"https://summerjob-9c9bf-default-rtdb.firebaseio.com/\",\n};\nconst app = initializeApp(firebaseConfig);\n\n// Get a reference to the database service\nconst database = getDatabase(app);\n//################################# END Firebase Settings ####################################\n\n//################################# APP ####################################\nfunction App() {\n  // States do app\n  const [text, setText] = useState(\"\");\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [scanResultWebCam, setScanResultWebCam] = useState(\"\");\n  // carregando estilo customizado\n  const classes = useStyles();\n\n  // codigo responsavel por gerar o QR code a partir do dado passado para o input\n  const generateQrCode = async () => {\n    try {\n      const response = await QRCode.toDataURL(text);\n      setImageUrl(response);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // função responsavel por gerenciar os erros da leitura do QR CODE\n  const handleErrorWebCam = (error) => {\n    console.log(error);\n  };\n\n  // função executada quando há uma leitura do QR code pela camera do notebook\n  const handleScanWebCam = (result) => {\n    if (result) {\n      setScanResultWebCam(result);\n    }\n  };\n\n  // função responsavel por INSERIR os dados obtidos a partir da leitura do QR CODE\n  // para o firebase\n  const submitOrder = () => {\n    // documentação para tempo real do firebase https://firebase.google.com/docs/database/web/start?authuser=0\n    const newPostKey = push(child(ref(database), \"ativos\")).key;\n\n    const parsedData = JSON.parse(JSON.parse(scanResultWebCam));\n\n    set(ref(database, `ativos/${newPostKey}`), {\n      ativo: parsedData[\"ativo\"],\n      tombamento: parsedData[\"tombamento\"],\n      unidade: parsedData[\"unidade\"],\n      setor: parsedData[\"setor\"],\n    });\n\n    setScanResultWebCam(\"\");\n  };\n\n  return (\n    <Container className={classes.conatiner}>\n      <Card>\n        <h2 className={classes.title}>\n          Generate Download & Scan QR Code with React js\n        </h2>\n        <CardContent>\n          <Grid container spacing={2}>\n            {/* Parte do codigo HTML responsavel por gerar o QR CODE */}\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n              <TextField\n                label=\"Enter Text Here\"\n                onChange={(e) => setText(e.target.value)}\n              />\n              <Button\n                className={classes.btn}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => generateQrCode()}\n              >\n                Generate\n              </Button>\n              <br />\n              <br />\n              <br />\n              {imageUrl ? (\n                <a href={imageUrl} download>\n                  <img src={imageUrl} alt=\"img\" />\n                </a>\n              ) : null}\n            </Grid>\n            {/* END Parte do codigo HTML responsavel por gerar o QR CODE */}\n\n            {/* Parte do codigo HTML responsavel por Ler o QR CODE */}\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n              <h3>Qr Code Scan by Web Cam</h3>\n              <QrReader\n                delay={300}\n                style={{ width: \"100%\" }}\n                onError={handleErrorWebCam}\n                onScan={handleScanWebCam}\n              />\n              <h3>Scanned By WebCam Code: {scanResultWebCam}</h3>\n              <Button\n                className={classes.btn}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={submitOrder}\n              >\n                Submit OS\n              </Button>\n              <Form/>\n            </Grid>\n            {/* END Parte do codigo HTML responsavel por Ler o QR CODE */}\n          </Grid>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n}\n\n// Criação de um estilo customizado\nconst useStyles = makeStyles((theme) => ({\n  conatiner: {\n    marginTop: 10,\n  },\n  title: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    background: \"#3f51b5\",\n    color: \"#fff\",\n    padding: 20,\n  },\n  btn: {\n    marginTop: 10,\n    marginBottom: 20,\n  },\n}));\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}